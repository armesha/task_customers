{% extends 'base.html.twig' %}

{% block body %}
    <div class="bg-white shadow overflow-hidden sm:rounded-lg p-6">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-900">Customers</h2>
            <button onclick="app.openAddCustomerModal()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                <i class="fas fa-plus mr-2"></i>Add Customer
            </button>
        </div>

        <!-- Filters -->
        <div class="mb-6 grid grid-cols-1 md:grid-cols-4 gap-4">
            <input type="text" id="nameFilter" placeholder="Filter by name" 
                   class="border rounded-md p-2">
            <input type="number" id="minSpentFilter" placeholder="Min total spent" 
                   class="border rounded-md p-2">
            <input type="number" id="maxSpentFilter" placeholder="Max total spent" 
                   class="border rounded-md p-2">
            <select id="sortOrder" class="border rounded-md p-2">
                <option value="name_asc">Name (A-Z)</option>
                <option value="name_desc">Name (Z-A)</option>
                <option value="total_spent_asc">Total Spent (Low to High)</option>
                <option value="total_spent_desc">Total Spent (High to Low)</option>
            </select>
        </div>

        <!-- Customers Table -->
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total Spent</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody id="customersTableBody" class="bg-white divide-y divide-gray-200">
                    <!-- Customers will be loaded here -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Add Customer Modal -->
    <div id="addCustomerModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Add New Customer</h3>
                <div class="mt-2">
                    <input type="text" id="newCustomerName" placeholder="Customer Name" 
                           class="w-full border rounded-md p-2 mb-4">
                    <div class="flex justify-end">
                        <button onclick="app.closeAddCustomerModal()" 
                                class="mr-2 bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
                            Cancel
                        </button>
                        <button onclick="app.addCustomer()" 
                                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Add
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Spending Modal -->
    <div id="addSpendingModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Add New Spending</h3>
                <div class="mt-2">
                    <input type="hidden" id="spendingCustomerId">
                    <input type="date" id="spendingDate" 
                           class="w-full border rounded-md p-2 mb-4">
                    <input type="number" id="spendingAmount" placeholder="Amount" step="0.01"
                           class="w-full border rounded-md p-2 mb-4">
                    <div class="flex justify-end">
                        <button onclick="app.closeAddSpendingModal()" 
                                class="mr-2 bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
                            Cancel
                        </button>
                        <button onclick="app.addSpending()" 
                                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                            Add
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        let app = {
            init: function() {
                this.bindEvents();
                this.loadCustomers();
            },

            bindEvents: function() {
                document.querySelectorAll('#nameFilter, #minSpentFilter, #maxSpentFilter')
                    .forEach(el => el?.addEventListener('input', () => this.loadCustomers()));

                document.querySelector('#sortOrder')
                    ?.addEventListener('change', () => this.loadCustomers());
            },

            loadCustomers: function() {
                const nameFilter = document.querySelector('#nameFilter')?.value || '';
                const minSpent = document.querySelector('#minSpentFilter')?.value || '';
                const maxSpent = document.querySelector('#maxSpentFilter')?.value || '';
                const sortValue = document.querySelector('#sortOrder')?.value || 'name_asc';
                
                // Extract sort_by and sort_order from the select value
                let sortBy, sortOrder;
                if (sortValue === 'name_asc') {
                    sortBy = 'name';
                    sortOrder = 'asc';
                } else if (sortValue === 'name_desc') {
                    sortBy = 'name';
                    sortOrder = 'desc';
                } else if (sortValue === 'total_spent_asc') {
                    sortBy = 'total_spent';
                    sortOrder = 'asc';
                } else if (sortValue === 'total_spent_desc') {
                    sortBy = 'total_spent';
                    sortOrder = 'desc';
                }

                let url = '/api/users?';
                if (nameFilter) url += `name=${encodeURIComponent(nameFilter)}&`;
                if (minSpent) url += `min_total_spent=${minSpent}&`;
                if (maxSpent) url += `max_total_spent=${maxSpent}&`;
                url += `sort_by=${sortBy}&sort_order=${sortOrder}`;

                console.log('Making API request to:', url);

                axios.get(url)
                    .then(response => {
                        console.log('API Response:', response.data);
                        const customers = response.data;
                        const tbody = document.querySelector('#customersTableBody');
                        if (!tbody) return;

                        tbody.innerHTML = '';

                        customers.forEach(customer => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${customer.name}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">$${customer.total_spent.toFixed(2)}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <button onclick="app.openAddSpendingModal(${customer.id})" 
                                            class="text-blue-600 hover:text-blue-900 mr-3">
                                        <i class="fas fa-plus-circle"></i> Add Spending
                                    </button>
                                </td>
                            `;
                            tbody.appendChild(row);
                        });
                    })
                    .catch(error => {
                        console.error('Error loading customers:', error);
                        console.error('Error details:', error.response?.data);
                        Swal.fire('Error', 'Failed to load customers', 'error');
                    });
            },

            openAddCustomerModal: function() {
                document.querySelector('#addCustomerModal')?.classList.remove('hidden');
            },

            closeAddCustomerModal: function() {
                document.querySelector('#addCustomerModal')?.classList.add('hidden');
                document.querySelector('#newCustomerName').value = '';
            },

            addCustomer: function() {
                const nameInput = document.querySelector('#newCustomerName');
                if (!nameInput) return;

                const name = nameInput.value.trim();
                if (!name) {
                    Swal.fire('Error', 'Please enter a customer name', 'error');
                    return;
                }

                axios.post('/api/users', { name })
                    .then(response => {
                        this.closeAddCustomerModal();
                        this.loadCustomers();
                        Swal.fire('Success', 'Customer added successfully', 'success');
                    })
                    .catch(error => {
                        console.error('Error adding customer:', error);
                        Swal.fire('Error', 'Failed to add customer', 'error');
                    });
            },

            openAddSpendingModal: function(customerId) {
                const modal = document.querySelector('#addSpendingModal');
                const customerIdInput = document.querySelector('#spendingCustomerId');
                const dateInput = document.querySelector('#spendingDate');
                
                if (modal) modal.classList.remove('hidden');
                if (customerIdInput) customerIdInput.value = customerId;
                if (dateInput) dateInput.value = new Date().toISOString().split('T')[0];
            },

            closeAddSpendingModal: function() {
                const modal = document.querySelector('#addSpendingModal');
                const amountInput = document.querySelector('#spendingAmount');
                
                if (modal) modal.classList.add('hidden');
                if (amountInput) amountInput.value = '';
            },

            addSpending: function() {
                const customerIdInput = document.querySelector('#spendingCustomerId');
                const dateInput = document.querySelector('#spendingDate');
                const amountInput = document.querySelector('#spendingAmount');

                if (!customerIdInput || !dateInput || !amountInput) return;

                const customerId = customerIdInput.value;
                const date = dateInput.value;
                const amount = parseFloat(amountInput.value);

                if (!date || !amount || isNaN(amount)) {
                    Swal.fire('Error', 'Please fill in all fields with valid values', 'error');
                    return;
                }

                if (amount <= 0) {
                    Swal.fire('Error', 'Amount must be greater than 0', 'error');
                    return;
                }

                axios.post(`/api/users/${customerId}/spending`, { date, amount })
                    .then(response => {
                        this.closeAddSpendingModal();
                        this.loadCustomers();
                        Swal.fire('Success', 'Spending added successfully', 'success');
                    })
                    .catch(error => {
                        console.error('Error adding spending:', error);
                        Swal.fire('Error', 'Failed to add spending', 'error');
                    });
            }
        };

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => app.init());

        // Make app functions available globally
        window.app = app;
    </script>
{% endblock %}
